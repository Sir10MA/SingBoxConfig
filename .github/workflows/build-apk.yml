# GitHub Actions workflow to build a KivyMD app using python-for-android (p4a) directly.

name: Build Android APK with P4A

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Java Development Kit (JDK) 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      # 3. Set up Python 3.9
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # 4. Manually Install Android SDK
      # This ensures a stable environment with all necessary tools in the PATH.
      - name: Install Android SDK
        run: |
          SDK_ROOT=${HOME}/android-sdk
          echo "ANDROID_SDK_ROOT=${SDK_ROOT}" >> $GITHUB_ENV
          echo "SDK_ROOT=${SDK_ROOT}" >> $GITHUB_ENV
          
          mkdir -p ${SDK_ROOT}
          wget --quiet https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d ${SDK_ROOT}/cmdline-tools
          mv ${SDK_ROOT}/cmdline-tools/cmdline-tools ${SDK_ROOT}/cmdline-tools/latest
          rm cmdline-tools.zip
          
          echo "${SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${SDK_ROOT}/platform-tools" >> $GITHUB_PATH
          
          yes | sdkmanager --licenses > /dev/null
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"

      # 5. Install Python dependencies, including python-for-android
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache autoconf libtool pkg-config
          python -m pip install --upgrade pip
          pip install "cython<3.0"
          pip install python-for-android

      # 6. Build the APK using the p4a command
      # This single command defines all the app's properties and triggers the build.
      - name: Build with python-for-android
        run: |
          p4a apk \
            --name="Sing-box Config Maker" \
            --package=org.example.singboxconfig \
            --version=0.5 \
            --private=. \
            --requirements=python3,kivy,kivymd,requests,pysocks \
            --permission=INTERNET \
            --permission=ACCESS_NETWORK_STATE \
            --android-api=33 \
            --min-api=21 \
            --arch=arm64-v8a \
            --arch=armeabi-v7a \
            --bootstrap=sdl2 \
            --icon="icon.png" \
            --orientation=portrait \
            --debug

      # 7. Find and rename the APK for easy uploading
      # The generated APK has a generic name, so we find it and give it a clear one.
      - name: Locate and Rename APK
        run: |
          find . -name "*.apk" -exec mv {} singbox-config-maker.apk \;

      # 8. Upload the generated APK as a build artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: singbox-config-maker-apk
          path: singbox-config-maker.apk
