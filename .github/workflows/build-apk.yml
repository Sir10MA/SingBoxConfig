# GitHub Actions workflow to build a KivyMD Python app into an Android APK
# Version 5: Manually installs the Android SDK to bypass action resolution errors.

name: Build Android APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Java Development Kit (JDK) 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      # 3. Set up Python 3.9
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # 4. [NEW] Manually Install Android SDK
      # This block replaces the failing 'android-actions/setup-sdk' action.
      # It downloads the command-line tools and uses them to install the required packages.
      - name: Install Android SDK
        run: |
          # Set SDK root path and add it to the environment for subsequent steps
          SDK_ROOT=${HOME}/android-sdk
          echo "ANDROID_SDK_ROOT=${SDK_ROOT}" >> $GITHUB_ENV
          
          # Download and unzip the Android command-line tools
          mkdir -p ${SDK_ROOT}
          wget --quiet https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d ${SDK_ROOT}/cmdline-tools
          mv ${SDK_ROOT}/cmdline-tools/cmdline-tools ${SDK_ROOT}/cmdline-tools/latest
          rm cmdline-tools.zip
          
          # Add the SDK tools to the system PATH
          echo "${SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${SDK_ROOT}/platform-tools" >> $GITHUB_PATH
          
          # Use sdkmanager to install the required platform, build-tools, and platform-tools
          # The 'yes' command automatically accepts the licenses
          yes | sdkmanager --licenses > /dev/null
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

      # 5. Install Python and system dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache autoconf libtool pkg-config
          python -m pip install --upgrade pip
          pip install "cython<3.0"
          pip install buildozer

      # 6. Create the buildozer.spec file
      - name: Create buildozer.spec
        run: |
          cat > buildozer.spec << EOF
          [app]
          title = Sing-box Config Maker
          package.name = singboxconfig
          package.domain = org.example
          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas,json
          version = 0.4
          requirements = python3,kivy,kivymd,requests,pysocks
          orientation = portrait
          icon.filename = %(source.dir)s/icon.png
          
          [buildozer]
          log_level = 2
          warn_on_root = 1
          
          [android]
          fullscreen = 0
          android.permissions = INTERNET, ACCESS_NETWORK_STATE
          android.api = 33
          android.minapi = 21
          android.ndk = 25b
          android.archs = arm64-v8a, armeabi-v7a
          EOF

      # 7. Clean previous buildozer artifacts
      - name: Clean buildozer cache
        run: buildozer appclean

      # 8. Run the Buildozer build command
      - name: Build with Buildozer
        run: buildozer -v android debug

      # 9. Upload the generated APK as a build artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: singbox-config-maker-apk
          path: bin/*.apk
